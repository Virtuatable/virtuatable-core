module Arkaan
  module Monitoring
    # A vigilante is a specific type of service that watches over the
    # infrastructure and give a clear look at its global state.
    # @author Vincent Courtois <courtois.vincent@outlook.com>
    class Vigilante
      include Mongoid::Document
      include Mongoid::Timestamps

      # @!attribute [rw] token
      #   @return [String] the token the vigilante uses to identify himself in the services
      field :token, type: String
      # @!attribute [rw] max_results
      #   @return [Integer] the number of results the vigilante should be keeping at any time.
      #     The oldest result should be erased to not go over the limit
      field :max_results, type: Integer, default: 20

      # @!attribute [rw] reports
      #   @return [Array<Arkaan::monitoring::Results::Report>] the report generated by running this vigilante.
      has_many :reports, class_name: 'Arkaan::Monitoring::Results::Report', inverse_of: :vigilante

      validates :token, presence: {message: 'required'}

      validates :max_results, 
        numericality: {greater_than: 0, message: 'minimum'}

      # Adds a report to the collection of reports by eventually deleting the oldest one.
      # @param report [Arkaan::Monitoring::Results::Report] the report to add to the vigilante,
      #   added only if it does not exceed the max number of reports the vigilante can store.
      def add_report(report)
        erase_oldest_result if result_full?
        reports << report
      end

      # Checks if the list of reports is already full, or if more can be added.
      # @return [Boolean] TRUE if the number of reports already exceeds the max number.
      def results_full?
        reports.to_a.count >= max_results
      end

      # Erases the oldest results to keep only MAX - 1 results in the list.
      def erase_oldest_result
        limit = reports.count + 1 - vigilante.max_results
        reports.sort_by(created_at: :asc).limit(limit).each(&:delete)
      end
    end
  end
end