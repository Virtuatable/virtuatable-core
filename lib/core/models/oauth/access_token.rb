module Core
  module Models
    module OAuth
      # An access token is the value assigned to the application
      # to access the data the user is allowed to access.
      # @author Vincent Courtois <courtois.vincent@outlook.com>
      class AccessToken
        include Mongoid::Document
        include Mongoid::Timestamps

        store_in collection: 'oauth_access_tokens'

        # @!attribute [rw] value
        #   @return [String] the value of the token, returned to the application when built.
        field :value, type: String, default: ->{ SecureRandom.hex }

        # @!attribute [rw] authorization
        #   @return [Core::Models::OAuth::Authorization] the authorization code that issued this token to the application for this user.
        belongs_to :authorization, class_name: 'Core::Models::OAuth::Authorization', inverse_of: :tokens, optional: true
        # @!attribute [rw] generator
        #   @return [Core::Models::Oauth::AccessToken] the token that generated this one.
        belongs_to :generator, class_name: 'Core::Models::OAuth::AccessToken', inverse_of: :generated, optional: true

        # @!attribute [rw] generated
        #   @return [Core::Models::OAuth::AccessToken] the token that has been generated by the current one.
        has_one :generated, class_name: 'Core::Models::OAuth::AccessToken', inverse_of: :generator

        validates :value, 
          presence: {message: 'required'},
          uniqueness: {message: 'uniq'}

        # Returns the scopes this access token can use to access the application
        # @return [Array<Core::Models::OAuth::Scope>] the array of scopes from the linked authorization
        def scopes
          premium ? Core::Models::OAuth::Scope.all.to_a : authorization.scopes
        end

        def premium
          authorization.application.premium
        end
      end
    end
  end
end