var search_data = {"index":{"searchIndex":["arkaan","account","authentication","session","campaign","campaigns","invitation","tag","concerns","activable","diagnosticable","enumerable","classmethods","premiumable","sluggable","classmethods","monitoring","gateway","instance","route","service","websocket","oauth","accesstoken","application","authorization","refreshtoken","permissions","category","group","right","phone","specs","utils","controller","sinatra","errors","badrequest","forbidden","httperror","notfound","microservice","seeder","nonpremiumtestcontroller","object","premiumtestcontroller","testcontroller","add_body_to_params()","app()","check_presence()","check_session()","create_service()","custom_error()","declare_premium_route()","declare_route()","declare_route_with()","do_request()","enum_field()","from_location()","handle_arkaan_exception()","in_standard_mode()","in_test_mode()","include_shared_examples()","load_errors_from()","loadable?()","make_request()","make_sluggable()","model_error()","new()","new()","new()","new()","new()","parse_current_route()","path()","register_as()","select_params()","title_unicity()","gemfile","gemfile.lock","arkaan.gemspec","application.css","application.js","index.html"],"longSearchIndex":["arkaan","arkaan::account","arkaan::authentication","arkaan::authentication::session","arkaan::campaign","arkaan::campaigns","arkaan::campaigns::invitation","arkaan::campaigns::tag","arkaan::concerns","arkaan::concerns::activable","arkaan::concerns::diagnosticable","arkaan::concerns::enumerable","arkaan::concerns::enumerable::classmethods","arkaan::concerns::premiumable","arkaan::concerns::sluggable","arkaan::concerns::sluggable::classmethods","arkaan::monitoring","arkaan::monitoring::gateway","arkaan::monitoring::instance","arkaan::monitoring::route","arkaan::monitoring::service","arkaan::monitoring::websocket","arkaan::oauth","arkaan::oauth::accesstoken","arkaan::oauth::application","arkaan::oauth::authorization","arkaan::oauth::refreshtoken","arkaan::permissions","arkaan::permissions::category","arkaan::permissions::group","arkaan::permissions::right","arkaan::phone","arkaan::specs","arkaan::utils","arkaan::utils::controller","arkaan::utils::controller::sinatra","arkaan::utils::errors","arkaan::utils::errors::badrequest","arkaan::utils::errors::forbidden","arkaan::utils::errors::httperror","arkaan::utils::errors::notfound","arkaan::utils::microservice","arkaan::utils::seeder","nonpremiumtestcontroller","object","premiumtestcontroller","testcontroller","arkaan::utils::controller#add_body_to_params()","object#app()","arkaan::utils::controller#check_presence()","arkaan::utils::controller#check_session()","arkaan::utils::seeder#create_service()","arkaan::utils::controller#custom_error()","arkaan::utils::controller::declare_premium_route()","arkaan::utils::controller::declare_route()","arkaan::utils::controller::declare_route_with()","arkaan::specs#do_request()","arkaan::concerns::enumerable::classmethods#enum_field()","arkaan::utils::microservice#from_location()","arkaan::utils::controller#handle_arkaan_exception()","arkaan::utils::microservice#in_standard_mode()","arkaan::utils::microservice#in_test_mode()","arkaan::specs::include_shared_examples()","arkaan::utils::controller::load_errors_from()","arkaan::utils::microservice#loadable?()","object#make_request()","arkaan::concerns::sluggable::classmethods#make_sluggable()","arkaan::utils::controller#model_error()","arkaan::utils::errors::badrequest::new()","arkaan::utils::errors::forbidden::new()","arkaan::utils::errors::httperror::new()","arkaan::utils::errors::notfound::new()","arkaan::utils::microservice::new()","arkaan::utils::controller#parse_current_route()","arkaan::utils::microservice#path()","arkaan::utils::microservice#register_as()","arkaan::utils::controller#select_params()","arkaan::campaign#title_unicity()","","","","","",""],"info":[["Arkaan","","Arkaan.html","","<p>Main module of the application, holding all the subsequent classes. @author\nVincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Account","","Arkaan/Account.html","","<p>A user account with all related attributes. It holds credentials and\ninformations about a designated …\n"],["Arkaan::Authentication","","Arkaan/Authentication.html","","<p>This module holds the logic for user authentication to our frontend.\n@author Vincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Authentication::Session","","Arkaan/Authentication/Session.html","","<p>A session represents the connection of the user on our frontend\napplication. Nobody else than our frontend …\n"],["Arkaan::Campaign","","Arkaan/Campaign.html","","<p>A campaign is a gathering of accounts playing on the same interface, and\ninteracting in a common game. …\n"],["Arkaan::Campaigns","","Arkaan/Campaigns.html","","<p>The campaigns module is holding the logic for some objects related to\ncampaigns. @author Vincent Courtois …\n"],["Arkaan::Campaigns::Invitation","","Arkaan/Campaigns/Invitation.html","","<p>An invitation is the linked between a player and a campaign, accepted or\nnot. @author Vincent Courtois …\n"],["Arkaan::Campaigns::Tag","","Arkaan/Campaigns/Tag.html","","<p>A campaign tag is a string describing a characteristic of the campaign\nit&#39;s in. @author Vincent  …\n"],["Arkaan::Concerns","","Arkaan/Concerns.html","","<p>This module holds the shared concerns to include in the desired models.\n@author Vincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Concerns::Activable","","Arkaan/Concerns/Activable.html","","<p>Concerns for the objects that can be activated or deactivated, included the\ncorresponding scopes. @author …\n"],["Arkaan::Concerns::Diagnosticable","","Arkaan/Concerns/Diagnosticable.html","","<p>Includes the diagnostic URL field, and the related validations. @author\nVincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Concerns::Enumerable","","Arkaan/Concerns/Enumerable.html","","<p>Defines enumerations for the Mongoid models. An enumeration is a field that\ncan only use a given set …\n"],["Arkaan::Concerns::Enumerable::ClassMethods","","Arkaan/Concerns/Enumerable/ClassMethods.html","","<p>Submodule holding all the static methods add to the current subclass.\n@author Vincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Concerns::Premiumable","","Arkaan/Concerns/Premiumable.html","","<p>Includes the premium field to make the entity including it accessible only\nto premium applications or …\n"],["Arkaan::Concerns::Sluggable","","Arkaan/Concerns/Sluggable.html","","<p>Includes the slug field, always the same in all models. @author Vincent\nCourtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Concerns::Sluggable::ClassMethods","","Arkaan/Concerns/Sluggable/ClassMethods.html","","<p>Module holding the class methods for the classes including this concern.\n@author Vincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Monitoring","","Arkaan/Monitoring.html","","<p>The monitoring module holds all the logic about the services so they can be\nactivated or deactivated. …\n"],["Arkaan::Monitoring::Gateway","","Arkaan/Monitoring/Gateway.html","","<p>A gateway is a portal by which you access the different web services of the\napplication suite. @author …\n"],["Arkaan::Monitoring::Instance","","Arkaan/Monitoring/Instance.html","","<p>An instance is one of the services, deployed on one server. A service may\nhave many instances to balance …\n"],["Arkaan::Monitoring::Route","","Arkaan/Monitoring/Route.html","","<p>A route is an endpoint accessible in a service. Each route has to have an\nassociated endpoint in the …\n"],["Arkaan::Monitoring::Service","","Arkaan/Monitoring/Service.html","","<p>A service is the representation of one of the applications composing the\nAPI. @author Vincent Courtois …\n"],["Arkaan::Monitoring::Websocket","","Arkaan/Monitoring/Websocket.html","","<p>The websocket is a particular kind of service, just like the gateway. It\nalways has the same signature. …\n"],["Arkaan::OAuth","","Arkaan/OAuth.html","","<p>This module holds the logic for the connection of an application to our\nAPI. @author Vincent Courtois …\n"],["Arkaan::OAuth::AccessToken","","Arkaan/OAuth/AccessToken.html","","<p>An access token is the value assigned to the application to access the\nprivate data of an account. @author …\n"],["Arkaan::OAuth::Application","","Arkaan/OAuth/Application.html","","<p>An application is what is referred to in the OAuth2.0 RFC as a client,\nwanting to access private informations …\n"],["Arkaan::OAuth::Authorization","","Arkaan/OAuth/Authorization.html","","<p>An OAuth authorization is granted by a user to an application to access its\npersonal data. @author Vincent …\n"],["Arkaan::OAuth::RefreshToken","","Arkaan/OAuth/RefreshToken.html","","<p>A refresh token is used when an access token is expired, to get a new one.\nIt is then recreated for the …\n"],["Arkaan::Permissions","","Arkaan/Permissions.html","","<p>This module holds the logic for all the classes concerning the permissions\nabd rights for the user.  …\n"],["Arkaan::Permissions::Category","","Arkaan/Permissions/Category.html","","<p>A category of rights regroups one or several rights for convenience\npurposes. @author Vincent Courtois …\n"],["Arkaan::Permissions::Group","","Arkaan/Permissions/Group.html","","<p>A group gathers one or several users to give them the same rights for\nconviniency purposes. @author  …\n"],["Arkaan::Permissions::Right","","Arkaan/Permissions/Right.html","","<p>A right is the access to one or several features in the application.\nIt&#39;s applied to a group, and …\n"],["Arkaan::Phone","","Arkaan/Phone.html","","<p>A phone number is given by a user so that the persons he has selected can\nhave it to contact him. @author …\n"],["Arkaan::Specs","","Arkaan/Specs.html","","<p>This module holds all the logic for the specs tools for all micro services\n(shared examples and other …\n"],["Arkaan::Utils","","Arkaan/Utils.html","","<p>Utility classes for the different micro-services of the suite. @author\nVincent Courtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Utils::Controller","","Arkaan/Utils/Controller.html","","<p>Base controller to handle the standard error when accessing the API.\n@author Vincent Courtois &lt;courtois.vincenet@outlook.com&gt; …\n"],["Arkaan::Utils::Controller::Sinatra","","Arkaan/Utils/Controller/Sinatra.html","",""],["Arkaan::Utils::Errors","","Arkaan/Utils/Errors.html","","<p>Module gathering all the exception classes used throughout the utils\nmodule, mainly linked to HTTP errors. …\n"],["Arkaan::Utils::Errors::BadRequest","","Arkaan/Utils/Errors/BadRequest.html","","<p>A bad request error is raised when the data given to a model makes this\nmodel invalid. @author Vincent …\n"],["Arkaan::Utils::Errors::Forbidden","","Arkaan/Utils/Errors/Forbidden.html","","<p>A forbidden error occurs when a user tries to perform an action he&#39;s\nnot allowed to. @author Vincent …\n"],["Arkaan::Utils::Errors::HTTPError","","Arkaan/Utils/Errors/HTTPError.html","","<p>Standard class parent to all specialized http errors. @author Vincent\nCourtois &lt;courtois.vincent@outlook.com&gt; …\n"],["Arkaan::Utils::Errors::NotFound","","Arkaan/Utils/Errors/NotFound.html","","<p>A not found error occurs when a user tries to reach a resource that does\nnot exist. @author Vincent  …\n"],["Arkaan::Utils::MicroService","","Arkaan/Utils/MicroService.html","","<p>This class is a singleton to load and save parameters for the whole\napplication. @author Vincent Courtois …\n"],["Arkaan::Utils::Seeder","","Arkaan/Utils/Seeder.html","","<p>This class loads the necessary data in the database if they don&#39;t exist\nyet. @author Vincent Courtois …\n"],["NonPremiumTestController","","NonPremiumTestController.html","",""],["Object","","Object.html","",""],["PremiumTestController","","PremiumTestController.html","",""],["TestController","","TestController.html","",""],["add_body_to_params","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-add_body_to_params","()","<p>Adds the parsed body to the parameters, overwriting the parameters of the\nquerystring with the values …\n"],["app","Object","Object.html#method-i-app","()",""],["check_presence","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-check_presence","(*fields, route:)","<p>Checks the presence of several fields given as parameters and halts the\nexecution if it&#39;s not present. …\n"],["check_session","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-check_session","(action)","<p>Checks if the session ID is given in the parameters and if the session\nexists. @param action [String] …\n"],["create_service","Arkaan::Utils::Seeder","Arkaan/Utils/Seeder.html#method-i-create_service","(key)","<p>Creates the service if it does not exist, and the instance if it does not\nexist. @return [Arkaan::Monitoring::Service] …\n"],["custom_error","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-custom_error","(status, path)","<p>Halts the application and creates the returned body from the parameters and\nthe errors config file. @param …\n"],["declare_premium_route","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-c-declare_premium_route","(verb, path, &block)","<p>Creates a non premium route whithin the Sinatra application, and registers\nit in the database if it does …\n"],["declare_route","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-c-declare_route","(verb, path, &block)","<p>Creates a premium route whithin the Sinatra application, and registers it\nin the database if it does …\n"],["declare_route_with","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-c-declare_route_with","(verb, path, premium, &block)","<p>Creates a route whithin the Sinatra application, and registers it in the\ndatabase if it does not already …\n"],["do_request","Arkaan::Specs","Arkaan/Specs.html#method-i-do_request","(parameters)",""],["enum_field","Arkaan::Concerns::Enumerable::ClassMethods","Arkaan/Concerns/Enumerable/ClassMethods.html#method-i-enum_field","(field_name, values, options = {})","<p>Creates the field with the given name, set of possible values, and options.\n@param field_name [String] …\n"],["from_location","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-from_location","(filename)","<p>Sets the location of the file calling the micro service and initializing it\nso that it&#39;s used as …\n"],["handle_arkaan_exception","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-handle_arkaan_exception","(exception)","<p>Creates a custom error from an existing Arkaan exception class. @param\nexception {StandardError} the …\n"],["in_standard_mode","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-in_standard_mode","()","<p>Loads the application in standard (production/development) mode, without\nthe test files. @return [Arkaan::utils::MicroService] …\n"],["in_test_mode","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-in_test_mode","()","<p>Loads the application in test mode, by adding the needed files to run the\ntest suite to the standard …\n"],["include_shared_examples","Arkaan::Specs","Arkaan/Specs.html#method-c-include_shared_examples","()","<p>Includes all the shared examples you could need, describing the basic\nbehaviour of a route.\n"],["load_errors_from","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-c-load_errors_from","(file)","<p>Loads the errors configuration file from the config folder. @param file\n[String] send __FILE__\n"],["loadable?","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-loadable-3F","()","<p>Determines if the application can be loaded (all the parameters have been\ncorrectly set) @return [Boolean] …\n"],["make_request","Object","Object.html#method-i-make_request","(verb, url, parameters)",""],["make_sluggable","Arkaan::Concerns::Sluggable::ClassMethods","Arkaan/Concerns/Sluggable/ClassMethods.html#method-i-make_sluggable","(entity_type)","<p>Add the field and its validations in the model including it. @param\nentity_type [String,Symbol] the name …\n"],["model_error","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-model_error","(instance, route)","<p>Halts the application with a Bad Request error affecting a field of a\nmodel. @param instance [Mongoid::Document] …\n"],["new","Arkaan::Utils::Errors::BadRequest","Arkaan/Utils/Errors/BadRequest.html#method-c-new","(action:, field:, error:)",""],["new","Arkaan::Utils::Errors::Forbidden","Arkaan/Utils/Errors/Forbidden.html#method-c-new","(field:, action:, error:)",""],["new","Arkaan::Utils::Errors::HTTPError","Arkaan/Utils/Errors/HTTPError.html#method-c-new","(action, field, error, status)",""],["new","Arkaan::Utils::Errors::NotFound","Arkaan/Utils/Errors/NotFound.html#method-c-new","(field:, action:, error:)",""],["new","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-c-new","()",""],["parse_current_route","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-parse_current_route","()","<p>Gets the current route in the database from the sinatra route. @return\n[Arkaan::Monitoring::Route] the …\n"],["path","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-path","()","<p>Getter for the path on which the service is mapped. @return [String,\nBoolean] the absolute path in the …\n"],["register_as","Arkaan::Utils::MicroService","Arkaan/Utils/MicroService.html#method-i-register_as","(service_name)","<p>Look for the service and sets it if it&#39;s found in the database, or set\nit to nil if not found. @param …\n"],["select_params","Arkaan::Utils::Controller","Arkaan/Utils/Controller.html#method-i-select_params","(*fields)","<p>Select parameters in the params hash, by its keys. @param fields\n[Array&lt;String&gt;] the keys to select …\n"],["title_unicity","Arkaan::Campaign","Arkaan/Campaign.html#method-i-title_unicity","()","<p>Adds an error message if the account creating this campaign already has a\ncampaign with the very same …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org/&#39; gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  arkaan (0.9.6)\n    activemodel (= 5.1.4)\n    activesupport (= 5.1.4)\n    bcrypt ...</pre>\n"],["arkaan.gemspec","","arkaan_gemspec.html","","<p>Gem::Specification.new do |spec|\n\n<pre>spec.name        = &#39;arkaan&#39;\nspec.version     = &#39;0.9.6&#39;\nspec.date     ...</pre>\n"],["application.css","","coverage/assets/0_10_2/application_css.html","","\n<pre>  -----------------------------------------------------------------------\n\nBlueprint CSS Framework 0.9 ...</pre>\n"],["application.js","","coverage/assets/0_10_2/application_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["index.html","","coverage/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html xmlns=&#39;www.w3.org/1999/xhtml&#39;&gt;\n\n<pre>&lt;head&gt;\n  &lt;title&gt;Code coverage ...</pre>\n"]]}}